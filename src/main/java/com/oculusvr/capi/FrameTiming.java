package com.oculusvr.capi;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class FrameTiming extends Structure {
  /** excessive movement after pauses for loading or initialization. */
  public float DeltaSeconds;
  /** for animation timing. */
  public double ThisFrameSeconds;
  /** Absolute point when IMU expects to be sampled for this frame. */
  public double TimewarpPointSeconds;
  /**
   * Absolute time when frame Present + GPU Flush will finish, and the next
   * frame starts.
   */
  public double NextFrameSeconds;
  /** value to ovrHmd_GetSensorState() go get general orientation. */
  public double ScanoutMidpointSeconds;
  /**
   * Timing points when each eye will be scanned out to display. Used for
   * rendering each eye.
   */
  public double[] EyeScanoutSeconds = new double[2];

  public FrameTiming() {
    super();
  }

  @Override
  protected List<?> getFieldOrder() {
    return Arrays.asList("DeltaSeconds", "ThisFrameSeconds", "TimewarpPointSeconds", "NextFrameSeconds",
        "ScanoutMidpointSeconds", "EyeScanoutSeconds");
  }

  public FrameTiming(float DeltaSeconds, double ThisFrameSeconds, double TimewarpPointSeconds, double NextFrameSeconds,
      double ScanoutMidpointSeconds, double EyeScanoutSeconds[]) {
    super();
    this.DeltaSeconds = DeltaSeconds;
    this.ThisFrameSeconds = ThisFrameSeconds;
    this.TimewarpPointSeconds = TimewarpPointSeconds;
    this.NextFrameSeconds = NextFrameSeconds;
    this.ScanoutMidpointSeconds = ScanoutMidpointSeconds;
    if ((EyeScanoutSeconds.length != this.EyeScanoutSeconds.length))
      throw new IllegalArgumentException("Wrong array size !");
    this.EyeScanoutSeconds = EyeScanoutSeconds;
  }

  public FrameTiming(Pointer peer) {
    super(peer);
  }

  public static class ByReference extends FrameTiming implements Structure.ByReference {

  };

  public static class ByValue extends FrameTiming implements Structure.ByValue {

  };
}
