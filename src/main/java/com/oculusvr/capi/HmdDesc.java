package com.oculusvr.capi;

import java.util.Arrays;
import java.util.List;

import com.oculusvr.capi.OvrLibrary.ovrHmd;
import com.oculusvr.capi.OvrLibrary.ovrHmdType;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class HmdDesc extends Structure {
  /** Handle of this HMD. */
  public ovrHmd Handle;
  /** @see ovrHmdType */
  public int Type;
  /** Name string describing the product: "Oculus Rift DK1", etc. */
  public Pointer ProductName;
  public Pointer Manufacturer;
  /** Capability bits described by ovrHmdCapBits. */
  public int Caps;
  public int DistortionCaps;
  /** Resolution of the entire HMD screen (for both eyes) in pixels. */
  public Sizei Resolution;
  /** Where monitor window should be on screen or (0,0). */
  public Vector2i WindowsPos;
  /** These define the recommended and maximum optical FOVs for the HMD. */
  public FovPort[] DefaultEyeFov = new FovPort[(int) com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
  public FovPort[] MaxEyeFov = new FovPort[(int) com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
  /** Can help reduce latency on sideways-scanned screens. */
  public int[] EyeRenderOrder = new int[(int) com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
  /**
   * Windows: "\\\\.\\DISPLAY3", etc. Can be used in
   * EnumDisplaySettings/CreateDC.
   */
  public Pointer DisplayDeviceName;
  /** MacOS */
  public NativeLong DisplayId;

  public HmdDesc() {
    super();
  }

  @Override
  protected List<?> getFieldOrder() {
    return Arrays.asList("Handle", "Type", "ProductName", "Manufacturer", "Caps", "DistortionCaps", "Resolution",
        "WindowsPos", "DefaultEyeFov", "MaxEyeFov", "EyeRenderOrder", "DisplayDeviceName", "DisplayId");
  }

  public HmdDesc(Pointer peer) {
    super(peer);
  }

  public static class ByReference extends HmdDesc implements Structure.ByReference {

  };

  public static class ByValue extends HmdDesc implements Structure.ByValue {

  };
}
