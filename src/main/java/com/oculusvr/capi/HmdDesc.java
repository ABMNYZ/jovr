package com.oculusvr.capi;
import com.oculusvr.capi.OvrLibrary.ovrHmd;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/stdint.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class HmdDesc extends Structure {
	/**
	 * Handle of this HMD.<br>
	 * C type : ovrHmd
	 */
	public ovrHmd Handle;
	/**
	 * @see ovrHmdType<br>
	 * C type : ovrHmdType
	 */
	public int Type;
	/** C type : const char* */
	public Pointer ProductName;
	/** C type : const char* */
	public Pointer Manufacturer;
	public int HmdCaps;
	public int SensorCaps;
	public int DistortionCaps;
	/** C type : ovrSizei */
	public OvrSizei Resolution;
	/** C type : ovrVector2i */
	public OvrVector2i WindowsPos;
	/** C type : ovrFovPort[ovrEye_Count] */
	public FovPort[] DefaultEyeFov = new FovPort[(int)com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
	/** C type : ovrFovPort[ovrEye_Count] */
	public FovPort[] MaxEyeFov = new FovPort[(int)com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
	/** C type : ovrEyeType[ovrEye_Count] */
	public int[] EyeRenderOrder = new int[(int)com.oculusvr.capi.OvrLibrary.ovrEyeType.ovrEye_Count];
	/** C type : const char* */
	public Pointer DisplayDeviceName;
	public int DisplayId;
	public HmdDesc() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Handle", "Type", "ProductName", "Manufacturer", "HmdCaps", "SensorCaps", "DistortionCaps", "Resolution", "WindowsPos", "DefaultEyeFov", "MaxEyeFov", "EyeRenderOrder", "DisplayDeviceName", "DisplayId");
	}
	public HmdDesc(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends HmdDesc implements Structure.ByReference {
		
	};
	public static class ByValue extends HmdDesc implements Structure.ByValue {
		
	};
}
