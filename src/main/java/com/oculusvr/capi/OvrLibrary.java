package com.oculusvr.capi;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

/**
 * JNA Wrapper for library <b>com.oculusvr.capi</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface OvrLibrary extends Library {
  public static final String JNA_LIBRARY_NAME = "com.oculusvr.capi";
  public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(OvrLibrary.JNA_LIBRARY_NAME);
  public static final OvrLibrary INSTANCE = (OvrLibrary) Native.loadLibrary(OvrLibrary.JNA_LIBRARY_NAME,
      OvrLibrary.class);

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrHmdType {
    /** <i>native declaration : OVR_CAPI.h:401</i> */
    public static final int ovrHmd_None = 0;
    /** <i>native declaration : OVR_CAPI.h:402</i> */
    public static final int ovrHmd_DK1 = 3;
    /** <i>native declaration : OVR_CAPI.h:403</i> */
    public static final int ovrHmd_DKHD = 4;
    /** <i>native declaration : OVR_CAPI.h:404</i> */
    public static final int ovrHmd_CrystalCoveProto = 5;
    /** <i>native declaration : OVR_CAPI.h:405</i> */
    public static final int ovrHmd_DK2 = 6;
    /**
     * Some HMD other then the one in the enumeration.<br>
     * <i>native declaration : OVR_CAPI.h:406</i>
     */
    public static final int ovrHmd_Other = 7;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrHmdCaps {
    /**
     * This HMD exists (as opposed to being unplugged).<br>
     * <i>native declaration : OVR_CAPI.h:414</i>
     */
    public static final int ovrHmdCap_Present = 0x0001;
    /**
     * HMD and is sensor is available for use<br>
     * <i>native declaration : OVR_CAPI.h:415</i>
     */
    public static final int ovrHmdCap_Available = 0x0002;
    /**
     * Supports low persistence mode.<br>
     * <i>native declaration : OVR_CAPI.h:428</i>
     */
    public static final int ovrHmdCap_LowPersistence = 0x0080;
    /**
     * Supports pixel reading for continuous latency testing.<br>
     * <i>native declaration : OVR_CAPI.h:429</i>
     */
    public static final int ovrHmdCap_LatencyTest = 0x0100;
    /**
     * Adjust prediction dynamically based on DK2 Latency.<br>
     * <i>native declaration : OVR_CAPI.h:430</i>
     */
    public static final int ovrHmdCap_DynamicPrediction = 0x0200;
    /** <i>native declaration : OVR_CAPI.h:432</i> */
    public static final int ovrHmdCap_NoVSync = 0x1000;
    /** <i>native declaration : OVR_CAPI.h:433</i> */
    public static final int ovrHmdCap_NoRestore = 0x4000;
    /** <i>native declaration : OVR_CAPI.h:436</i> */
    public static final int ovrHmdCap_Writable_Mask = 0x1380;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrSensorCaps {
    /**
     * Supports orientation tracking (IMU).<br>
     * <i>native declaration : OVR_CAPI.h:444</i>
     */
    public static final int ovrSensorCap_Orientation = 0x0010;
    /**
     * Supports yaw correction through magnetometer or other means.<br>
     * <i>native declaration : OVR_CAPI.h:445</i>
     */
    public static final int ovrSensorCap_YawCorrection = 0x0020;
    /**
     * Supports positional tracking.<br>
     * <i>native declaration : OVR_CAPI.h:446</i>
     */
    public static final int ovrSensorCap_Position = 0x0040;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrDistortionCaps {
    /**
     * Supports chromatic aberration correction.<br>
     * <i>native declaration : OVR_CAPI.h:454</i>
     */
    public static final int ovrDistortionCap_Chromatic = 0x01;
    /**
     * Supports timewarp.<br>
     * <i>native declaration : OVR_CAPI.h:455</i>
     */
    public static final int ovrDistortionCap_TimeWarp = 0x02;
    /**
     * Supports vignetting around the edges of the view.<br>
     * <i>native declaration : OVR_CAPI.h:456</i>
     */
    public static final int ovrDistortionCap_Vignette = 0x08;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrEyeType {
    /** <i>native declaration : OVR_CAPI.h:465</i> */
    public static final int ovrEye_Left = 0;
    /** <i>native declaration : OVR_CAPI.h:466</i> */
    public static final int ovrEye_Right = 1;
    /** <i>native declaration : OVR_CAPI.h:467</i> */
    public static final int ovrEye_Count = 2;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrStatusBits {
    /**
     * Orientation is currently tracked (connected and in use).<br>
     * <i>native declaration : OVR_CAPI.h:530</i>
     */
    public static final int ovrStatus_OrientationTracked = 0x0001;
    /**
     * Position is currently tracked (FALSE if out of range).<br>
     * <i>native declaration : OVR_CAPI.h:531</i>
     */
    public static final int ovrStatus_PositionTracked = 0x0002;
    /**
     * Position tracking HW is connected.<br>
     * <i>native declaration : OVR_CAPI.h:532</i>
     */
    public static final int ovrStatus_PositionConnected = 0x0020;
    /**
     * HMD Display is available & connected.<br>
     * <i>native declaration : OVR_CAPI.h:533</i>
     */
    public static final int ovrStatus_HmdConnected = 0x0080;
  };

  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrRenderAPIType {
    /** <i>native declaration : OVR_CAPI.h:629</i> */
    public static final int ovrRenderAPI_None = 0;
    /** <i>native declaration : OVR_CAPI.h:630</i> */
    public static final int ovrRenderAPI_OpenGL = 1;
    /** <i>native declaration : OVR_CAPI.h:631</i> */
    public static final int ovrRenderAPI_Android_GLES = 2;
    /** <i>native declaration : OVR_CAPI.h:632</i> */
    public static final int ovrRenderAPI_D3D9 = 3;
    /** <i>native declaration : OVR_CAPI.h:633</i> */
    public static final int ovrRenderAPI_D3D10 = 4;
    /** <i>native declaration : OVR_CAPI.h:634</i> */
    public static final int ovrRenderAPI_D3D11 = 5;
    /** <i>native declaration : OVR_CAPI.h:635</i> */
    public static final int ovrRenderAPI_Count = 6;
  };

  public static final String OVR_KEY_EYE_HEIGHT = (String) "EyeHeight";
  public static final String OVR_KEY_NAME = (String) "Name";
  public static final String OVR_KEY_GENDER = (String) "Gender";
  public static final String OVR_KEY_PLAYER_HEIGHT = (String) "PlayerHeight";
  public static final String OVR_KEY_NECK_TO_EYE_HORIZONTAL = (String) "NeckEyeHori";
  public static final String OVR_KEY_USER = (String) "User";
  public static final String OVR_KEY_IPD = (String) "IPD";

  public static final String OVR_DEFAULT_GENDER = (String) "Male";
  public static final float OVR_DEFAULT_NECK_TO_EYE_VERTICAL = (float) 0.12f;
  public static final float OVR_DEFAULT_PLAYER_HEIGHT = (float) 1.778f;
  public static final float OVR_DEFAULT_EYE_HEIGHT = (float) 1.675f;
  public static final float OVR_DEFAULT_IPD = (float) 0.064f;
  public static final float OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL = (float) 0.12f;

  /**
   * No other functions calls are allowed before ovr_Initialize succeeds or after ovr_Shutdown.<br>
   * Original signature : <code>ovrBool ovr_Initialize()</code><br>
   * <i>native declaration : OVR_CAPI.h:703</i>
   */
  byte ovr_Initialize();

  /**
   * Original signature : <code>void ovr_Shutdown()</code><br>
   * <i>native declaration : OVR_CAPI.h:704</i>
   */
  void ovr_Shutdown();

  /**
   * Users can get information about each HMD by calling ovrHmd_Create with an index.<br>
   * Original signature : <code>int ovrHmd_Detect()</code><br>
   * <i>native declaration : OVR_CAPI.h:709</i>
   */
  int ovrHmd_Detect();

  /**
   * If not null, returned handle must be freed with ovrHmd_Destroy.<br>
   * Original signature : <code>ovrHmd ovrHmd_Create(int)</code><br>
   * <i>native declaration : OVR_CAPI.h:715</i>
   */
  OvrLibrary.ovrHmd ovrHmd_Create(int index);

  /**
   * Original signature : <code>void ovrHmd_Destroy(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:716</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_Destroy(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_Destroy(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ovrHmd_Destroy(Pointer hmd);

  /**
   * Original signature : <code>void ovrHmd_Destroy(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:716</i>
   */
  void ovrHmd_Destroy(OvrLibrary.ovrHmd hmd);

  /**
   * but may be used to debug some of the related rendering.<br>
   * Original signature : <code>ovrHmd ovrHmd_CreateDebug(ovrHmdType)</code><br>
   * <i>native declaration : OVR_CAPI.h:720</i>
   */
  OvrLibrary.ovrHmd ovrHmd_CreateDebug(int type);

  /**
   * Pass null hmd to get global error (for create, etc).<br>
   * Original signature : <code>char* ovrHmd_GetLastError(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:726</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetLastError(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_GetLastError(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer ovrHmd_GetLastError(Pointer hmd);

  /**
   * Pass null hmd to get global error (for create, etc).<br>
   * Original signature : <code>char* ovrHmd_GetLastError(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:726</i>
   */
  Pointer ovrHmd_GetLastError(OvrLibrary.ovrHmd hmd);

  /**
   * capabilities are available.<br>
   * Original signature : <code>int ovrHmd_GetEnabledCaps(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:734</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetEnabledCaps(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_GetEnabledCaps(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int ovrHmd_GetEnabledCaps(Pointer hmd);

  /**
   * capabilities are available.<br>
   * Original signature : <code>int ovrHmd_GetEnabledCaps(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:734</i>
   */
  int ovrHmd_GetEnabledCaps(OvrLibrary.ovrHmd hmd);

  /**
   * such as ovrHmd_LowPersistance.<br>
   * Original signature : <code>void ovrHmd_SetEnabledCaps(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:738</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_SetEnabledCaps(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_SetEnabledCaps(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  void ovrHmd_SetEnabledCaps(Pointer hmd, int hmdCaps);

  /**
   * such as ovrHmd_LowPersistance.<br>
   * Original signature : <code>void ovrHmd_SetEnabledCaps(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:738</i>
   */
  void ovrHmd_SetEnabledCaps(OvrLibrary.ovrHmd hmd, int hmdCaps);

  /**
   * supportedSensorCaps.<br>
   * Original signature : <code>ovrBool ovrHmd_StartSensor(ovrHmd, unsigned int, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:754</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_StartSensor(com.oculusvr.capi.OvrLibrary.ovrHmd, int, int)} and
   *             {@link #ovrHmd_StartSensor(com.sun.jna.Pointer, int, int)} instead
   */
  @Deprecated
  byte ovrHmd_StartSensor(Pointer hmd, int supportedSensorCaps, int requiredSensorCaps);

  /**
   * supportedSensorCaps.<br>
   * Original signature : <code>ovrBool ovrHmd_StartSensor(ovrHmd, unsigned int, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:754</i>
   */
  byte ovrHmd_StartSensor(OvrLibrary.ovrHmd hmd, int supportedSensorCaps, int requiredSensorCaps);

  /**
   * Stops sensor sampling, shutting down internal resources.<br>
   * Original signature : <code>void ovrHmd_StopSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:757</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_StopSensor(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_StopSensor(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ovrHmd_StopSensor(Pointer hmd);

  /**
   * Stops sensor sampling, shutting down internal resources.<br>
   * Original signature : <code>void ovrHmd_StopSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:757</i>
   */
  void ovrHmd_StopSensor(OvrLibrary.ovrHmd hmd);

  /**
   * Resets sensor orientation.<br>
   * Original signature : <code>void ovrHmd_ResetSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:759</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_ResetSensor(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_ResetSensor(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ovrHmd_ResetSensor(Pointer hmd);

  /**
   * Resets sensor orientation.<br>
   * Original signature : <code>void ovrHmd_ResetSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:759</i>
   */
  void ovrHmd_ResetSensor(OvrLibrary.ovrHmd hmd);

  /**
   * This may also be used for more refined timing of FrontBuffer rendering logic, etc.<br>
   * Original signature : <code>ovrSensorState ovrHmd_GetSensorState(ovrHmd, double)</code><br>
   * <i>native declaration : OVR_CAPI.h:766</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetSensorState(com.oculusvr.capi.OvrLibrary.ovrHmd, double)} and
   *             {@link #ovrHmd_GetSensorState(com.sun.jna.Pointer, double)} instead
   */
  @Deprecated
  com.oculusvr.capi.SensorState.ByValue ovrHmd_GetSensorState(Pointer hmd, double absTime);

  /**
   * This may also be used for more refined timing of FrontBuffer rendering logic, etc.<br>
   * Original signature : <code>ovrSensorState ovrHmd_GetSensorState(ovrHmd, double)</code><br>
   * <i>native declaration : OVR_CAPI.h:766</i>
   */
  com.oculusvr.capi.SensorState.ByValue ovrHmd_GetSensorState(OvrLibrary.ovrHmd hmd, double absTime);

  /**
   * Only valid after StartSensor.<br>
   * Original signature : <code>ovrBool ovrHmd_GetSensorDesc(ovrHmd, ovrSensorDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:770</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetSensorDesc(com.oculusvr.capi.OvrLibrary.ovrHmd, com.oculusvr.capi.SensorDesc)} and
   *             {@link #ovrHmd_GetSensorDesc(com.sun.jna.Pointer, com.oculusvr.capi.SensorDesc)} instead
   */
  @Deprecated
  byte ovrHmd_GetSensorDesc(Pointer hmd, SensorDesc descOut);

  /**
   * Only valid after StartSensor.<br>
   * Original signature : <code>ovrBool ovrHmd_GetSensorDesc(ovrHmd, ovrSensorDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:770</i>
   */
  byte ovrHmd_GetSensorDesc(OvrLibrary.ovrHmd hmd, SensorDesc descOut);

  /**
   * Fills in description about HMD; this is the same as filled in by ovrHmd_Create.<br>
   * Original signature : <code>void ovrHmd_GetDesc(ovrHmd, ovrHmdDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:777</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetDesc(com.oculusvr.capi.OvrLibrary.ovrHmd, com.oculusvr.capi.HmdDesc)} and
   *             {@link #ovrHmd_GetDesc(com.sun.jna.Pointer, com.oculusvr.capi.HmdDesc)} instead
   */
  @Deprecated
  void ovrHmd_GetDesc(Pointer hmd, HmdDesc desc);

  /**
   * Fills in description about HMD; this is the same as filled in by ovrHmd_Create.<br>
   * Original signature : <code>void ovrHmd_GetDesc(ovrHmd, ovrHmdDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:777</i>
   */
  void ovrHmd_GetDesc(OvrLibrary.ovrHmd hmd, HmdDesc desc);

  /**
   * can improve performance.<br>
   * Original signature : <code>ovrSizei ovrHmd_GetFovTextureSize(ovrHmd, ovrEyeType, ovrFovPort, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:784</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetFovTextureSize(com.oculusvr.capi.OvrLibrary.ovrHmd, int, com.oculusvr.capi.FovPort.ByValue, float)}
   *             and
   *             {@link #ovrHmd_GetFovTextureSize(com.sun.jna.Pointer, int, com.oculusvr.capi.FovPort.ByValue, float)}
   *             instead
   */
  @Deprecated
  com.oculusvr.capi.OvrSizei.ByValue ovrHmd_GetFovTextureSize(Pointer hmd, int eye, FovPort.ByValue fov,
      float pixelsPerDisplayPixel);

  /**
   * can improve performance.<br>
   * Original signature : <code>ovrSizei ovrHmd_GetFovTextureSize(ovrHmd, ovrEyeType, ovrFovPort, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:784</i>
   */
  com.oculusvr.capi.OvrSizei.ByValue ovrHmd_GetFovTextureSize(OvrLibrary.ovrHmd hmd, int eye, FovPort.ByValue fov,
      float pixelsPerDisplayPixel);

  /**
   * Original signature :
   * <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, const ovrFovPort[2], ovrEyeRenderDesc[2])</code>
   * <br>
   * <i>native declaration : OVR_CAPI.h:826</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_ConfigureRendering(com.oculusvr.capi.OvrLibrary.ovrHmd, com.oculusvr.capi.RenderAPIConfig, int, com.oculusvr.capi.FovPort[], com.oculusvr.capi.EyeRenderDesc[])}
   *             and
   *             {@link #ovrHmd_ConfigureRendering(com.sun.jna.Pointer, com.oculusvr.capi.RenderAPIConfig, int, com.oculusvr.capi.FovPort[], com.oculusvr.capi.EyeRenderDesc[])}
   *             instead
   */
  @Deprecated
  byte ovrHmd_ConfigureRendering(Pointer hmd, RenderAPIConfig apiConfig, int distortionCaps, Pointer eyeFovIn,
      Pointer eyeRenderDescOut);

  /**
   * Original signature :
   * <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, const ovrFovPort[2], ovrEyeRenderDesc[2])</code>
   * <br>
   * <i>native declaration : OVR_CAPI.h:826</i>
   */
  byte ovrHmd_ConfigureRendering(OvrLibrary.ovrHmd hmd, RenderAPIConfig apiConfig, int distortionCaps,
      FovPort eyeFovIn[], EyeRenderDesc eyeRenderDescOut[]);

  /**
   * Original signature :
   * <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, const ovrFovPort[2], ovrEyeRenderDesc[2])</code>
   * <br>
   * <i>native declaration : OVR_CAPI.h:826</i>
   */
  byte ovrHmd_ConfigureRendering(Pointer hmd, RenderAPIConfig apiConfig, int distortionCaps, FovPort eyeFovIn[],
      EyeRenderDesc eyeRenderDescOut[]);

  /**
   * Pass 0 for frame index if not using GetFrameTiming.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrame(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:837</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_BeginFrame(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_BeginFrame(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrame(Pointer hmd, int frameIndex);

  /**
   * Pass 0 for frame index if not using GetFrameTiming.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrame(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:837</i>
   */
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrame(OvrLibrary.ovrHmd hmd, int frameIndex);

  /**
   * *** This Function will to Present/SwapBuffers and potentially wait for GPU Sync ***.<br>
   * Original signature : <code>void ovrHmd_EndFrame(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:843</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_EndFrame(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_EndFrame(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ovrHmd_EndFrame(Pointer hmd);

  /**
   * *** This Function will to Present/SwapBuffers and potentially wait for GPU Sync ***.<br>
   * Original signature : <code>void ovrHmd_EndFrame(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:843</i>
   */
  void ovrHmd_EndFrame(OvrLibrary.ovrHmd hmd);

  /**
   * HmdDesc.EyeRenderOrder[0] first.<br>
   * Original signature : <code>ovrPosef ovrHmd_BeginEyeRender(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:853</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_BeginEyeRender(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_BeginEyeRender(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  com.oculusvr.capi.Posef.ByValue ovrHmd_BeginEyeRender(Pointer hmd, int eye);

  /**
   * HmdDesc.EyeRenderOrder[0] first.<br>
   * Original signature : <code>ovrPosef ovrHmd_BeginEyeRender(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:853</i>
   */
  com.oculusvr.capi.Posef.ByValue ovrHmd_BeginEyeRender(OvrLibrary.ovrHmd hmd, int eye);

  /**
   * be different if a different pose was used for rendering.<br>
   * Original signature : <code>void ovrHmd_EndEyeRender(ovrHmd, ovrEyeType, ovrPosef, ovrTexture*)</code><br>
   * <i>native declaration : OVR_CAPI.h:861</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_EndEyeRender(com.oculusvr.capi.OvrLibrary.ovrHmd, int, com.oculusvr.capi.Posef.ByValue, com.oculusvr.capi.Texture)}
   *             and
   *             {@link #ovrHmd_EndEyeRender(com.sun.jna.Pointer, int, com.oculusvr.capi.Posef.ByValue, com.oculusvr.capi.Texture)}
   *             instead
   */
  @Deprecated
  void ovrHmd_EndEyeRender(Pointer hmd, int eye, com.oculusvr.capi.Posef.ByValue renderPose, Texture eyeTexture);

  /**
   * be different if a different pose was used for rendering.<br>
   * Original signature : <code>void ovrHmd_EndEyeRender(ovrHmd, ovrEyeType, ovrPosef, ovrTexture*)</code><br>
   * <i>native declaration : OVR_CAPI.h:861</i>
   */
  void ovrHmd_EndEyeRender(OvrLibrary.ovrHmd hmd, int eye, com.oculusvr.capi.Posef.ByValue renderPose,
      Texture eyeTexture);

  /**
   * the game side.<br>
   * Original signature : <code>ovrEyeRenderDesc ovrHmd_GetRenderDesc(ovrHmd, ovrEyeType, ovrFovPort)</code><br>
   * <i>native declaration : OVR_CAPI.h:888</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetRenderDesc(com.oculusvr.capi.OvrLibrary.ovrHmd, int, com.oculusvr.capi.FovPort.ByValue)}
   *             and {@link #ovrHmd_GetRenderDesc(com.sun.jna.Pointer, int, com.oculusvr.capi.FovPort.ByValue)} instead
   */
  @Deprecated
  EyeRenderDesc.ByValue ovrHmd_GetRenderDesc(Pointer hmd, int eyeType, FovPort.ByValue fov);

  /**
   * the game side.<br>
   * Original signature : <code>ovrEyeRenderDesc ovrHmd_GetRenderDesc(ovrHmd, ovrEyeType, ovrFovPort)</code><br>
   * <i>native declaration : OVR_CAPI.h:888</i>
   */
  EyeRenderDesc.ByValue ovrHmd_GetRenderDesc(OvrLibrary.ovrHmd hmd, int eyeType, FovPort.ByValue fov);

  /**
   * ovrDistortionMesh values will be set to null.<br>
   * Original signature :
   * <code>ovrBool ovrHmd_CreateDistortionMesh(ovrHmd, ovrEyeType, ovrFovPort, unsigned int, ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:924</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_CreateDistortionMesh(com.oculusvr.capi.OvrLibrary.ovrHmd, int, com.oculusvr.capi.FovPort.ByValue, int, com.oculusvr.capi.DistortionMesh)}
   *             and
   *             {@link #ovrHmd_CreateDistortionMesh(com.sun.jna.Pointer, int, com.oculusvr.capi.FovPort.ByValue, int, com.oculusvr.capi.DistortionMesh)}
   *             instead
   */
  @Deprecated
  byte ovrHmd_CreateDistortionMesh(Pointer hmd, int eyeType, FovPort.ByValue fov, int distortionCaps,
      DistortionMesh meshData);

  /**
   * ovrDistortionMesh values will be set to null.<br>
   * Original signature :
   * <code>ovrBool ovrHmd_CreateDistortionMesh(ovrHmd, ovrEyeType, ovrFovPort, unsigned int, ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:924</i>
   */
  byte ovrHmd_CreateDistortionMesh(OvrLibrary.ovrHmd hmd, int eyeType, FovPort.ByValue fov, int distortionCaps,
      DistortionMesh meshData);

  /**
   * are set to null and zeroes after the call.<br>
   * Original signature : <code>void ovrHmd_DestroyDistortionMesh(ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:931</i>
   */
  void ovrHmd_DestroyDistortionMesh(DistortionMesh meshData);

  /**
   * viewport changes after the fact. This can be used to adjust render size every frame, if desired.<br>
   * Original signature :
   * <code>void ovrHmd_GetRenderScaleAndOffset(ovrFovPort, ovrSizei, ovrRecti, ovrVector2f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:935</i><br>
   * 
   * @deprecated use the safer method
   *             {@link #ovrHmd_GetRenderScaleAndOffset(com.oculusvr.capi.FovPort.ByValue, com.oculusvr.capi.OvrSizei.ByValue, com.oculusvr.capi.OvrRecti.ByValue, com.oculusvr.capi.OvrVector2f[])}
   *             instead
   */
  @Deprecated
  void ovrHmd_GetRenderScaleAndOffset(FovPort.ByValue fov, com.oculusvr.capi.OvrSizei.ByValue textureSize,
      com.oculusvr.capi.OvrRecti.ByValue renderViewport, Pointer uvScaleOffsetOut);

  /**
   * viewport changes after the fact. This can be used to adjust render size every frame, if desired.<br>
   * Original signature :
   * <code>void ovrHmd_GetRenderScaleAndOffset(ovrFovPort, ovrSizei, ovrRecti, ovrVector2f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:935</i>
   */
  void ovrHmd_GetRenderScaleAndOffset(FovPort.ByValue fov, com.oculusvr.capi.OvrSizei.ByValue textureSize,
      com.oculusvr.capi.OvrRecti.ByValue renderViewport, OvrVector2f uvScaleOffsetOut[]);

  /**
   * with every frame and pass the index to RenderThread for processing.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_GetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:942</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetFrameTiming(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_GetFrameTiming(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_GetFrameTiming(Pointer hmd, int frameIndex);

  /**
   * with every frame and pass the index to RenderThread for processing.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_GetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:942</i>
   */
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_GetFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex);

  /**
   * pass the same frame index as was used for GetFrameTiming on the main thread.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:947</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_BeginFrameTiming(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_BeginFrameTiming(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrameTiming(Pointer hmd, int frameIndex);

  /**
   * pass the same frame index as was used for GetFrameTiming on the main thread.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:947</i>
   */
  com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex);

  /**
   * before this call to reduce latency and ensure proper timing.<br>
   * Original signature : <code>void ovrHmd_EndFrameTiming(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:952</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_EndFrameTiming(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_EndFrameTiming(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ovrHmd_EndFrameTiming(Pointer hmd);

  /**
   * before this call to reduce latency and ensure proper timing.<br>
   * Original signature : <code>void ovrHmd_EndFrameTiming(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:952</i>
   */
  void ovrHmd_EndFrameTiming(OvrLibrary.ovrHmd hmd);

  /**
   * isn't called. Resets internal frame index to the specified number.<br>
   * Original signature : <code>void ovrHmd_ResetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:957</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_ResetFrameTiming(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_ResetFrameTiming(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  void ovrHmd_ResetFrameTiming(Pointer hmd, int frameIndex);

  /**
   * isn't called. Resets internal frame index to the specified number.<br>
   * Original signature : <code>void ovrHmd_ResetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:957</i>
   */
  void ovrHmd_ResetFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex);

  /**
   * Must be called between ovrHmd_BeginFrameTiming & ovrHmd_EndFrameTiming.<br>
   * Original signature : <code>ovrPosef ovrHmd_GetEyePose(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:962</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetEyePose(com.oculusvr.capi.OvrLibrary.ovrHmd, int)} and
   *             {@link #ovrHmd_GetEyePose(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  com.oculusvr.capi.Posef.ByValue ovrHmd_GetEyePose(Pointer hmd, int eye);

  /**
   * Must be called between ovrHmd_BeginFrameTiming & ovrHmd_EndFrameTiming.<br>
   * Original signature : <code>ovrPosef ovrHmd_GetEyePose(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:962</i>
   */
  com.oculusvr.capi.Posef.ByValue ovrHmd_GetEyePose(OvrLibrary.ovrHmd hmd, int eye);

  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:969</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetEyeTimewarpMatrices(com.oculusvr.capi.OvrLibrary.ovrHmd, int, com.oculusvr.capi.Posef.ByValue, com.oculusvr.capi.OvrMatrix4f[])}
   *             and
   *             {@link #ovrHmd_GetEyeTimewarpMatrices(com.sun.jna.Pointer, int, com.oculusvr.capi.Posef.ByValue, com.oculusvr.capi.OvrMatrix4f[])}
   *             instead
   */
  @Deprecated
  void ovrHmd_GetEyeTimewarpMatrices(Pointer hmd, int eye, com.oculusvr.capi.Posef.ByValue renderPose, Pointer twmOut);

  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:969</i>
   */
  void ovrHmd_GetEyeTimewarpMatrices(OvrLibrary.ovrHmd hmd, int eye, com.oculusvr.capi.Posef.ByValue renderPose,
      OvrMatrix4f twmOut[]);

  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:969</i>
   */
  void ovrHmd_GetEyeTimewarpMatrices(Pointer hmd, int eye, com.oculusvr.capi.Posef.ByValue renderPose,
      OvrMatrix4f twmOut[]);

  /**
   * Used to generate projection from ovrEyeDesc::Fov.<br>
   * Original signature : <code>ovrMatrix4f ovrMatrix4f_Projection(ovrFovPort, float, float, ovrBool)</code><br>
   * <i>native declaration : OVR_CAPI.h:978</i>
   */
  OvrMatrix4f.ByValue ovrMatrix4f_Projection(FovPort.ByValue fov, float znear, float zfar, byte rightHanded);

  /**
   * orthoDistance = distance from camera, such as 0.8m<br>
   * Original signature :
   * <code>ovrMatrix4f ovrMatrix4f_OrthoSubProjection(ovrMatrix4f, ovrVector2f, float, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:984</i>
   */
  OvrMatrix4f.ByValue ovrMatrix4f_OrthoSubProjection(OvrMatrix4f.ByValue projection, OvrVector2f.ByValue orthoScale,
      float orthoDistance, float eyeViewAdjustX);

  /**
   * value as used in sensor messages.<br>
   * Original signature : <code>double ovr_GetTimeInSeconds()</code><br>
   * <i>native declaration : OVR_CAPI.h:989</i>
   */
  double ovr_GetTimeInSeconds();

  /**
   * Waits until the specified absolute time.<br>
   * Original signature : <code>double ovr_WaitTillTime(double)</code><br>
   * <i>native declaration : OVR_CAPI.h:992</i>
   */
  double ovr_WaitTillTime(double absTime);

  /**
   * be used to clear the screen.<br>
   * Original signature : <code>ovrBool ovrHmd_ProcessLatencyTest(ovrHmd, unsigned char[3])</code><br>
   * <i>native declaration : OVR_CAPI.h:1001</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_ProcessLatencyTest(com.oculusvr.capi.OvrLibrary.ovrHmd, java.nio.ByteBuffer)} and
   *             {@link #ovrHmd_ProcessLatencyTest(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  byte ovrHmd_ProcessLatencyTest(Pointer hmd, Pointer rgbColorOut);

  /**
   * be used to clear the screen.<br>
   * Original signature : <code>ovrBool ovrHmd_ProcessLatencyTest(ovrHmd, unsigned char[3])</code><br>
   * <i>native declaration : OVR_CAPI.h:1001</i>
   */
  byte ovrHmd_ProcessLatencyTest(OvrLibrary.ovrHmd hmd, ByteBuffer rgbColorOut);

  /**
   * Buffer is valid until next call.<br>
   * Original signature : <code>char* ovrHmd_GetLatencyTestResult(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:1005</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetLatencyTestResult(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_GetLatencyTestResult(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer ovrHmd_GetLatencyTestResult(Pointer hmd);

  /**
   * Buffer is valid until next call.<br>
   * Original signature : <code>char* ovrHmd_GetLatencyTestResult(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:1005</i>
   */
  Pointer ovrHmd_GetLatencyTestResult(OvrLibrary.ovrHmd hmd);

  /**
   * pixel-read back method (-1 for invalid or N/A)<br>
   * Original signature : <code>double ovrHmd_GetMeasuredLatencyTest2(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:1009</i><br>
   * 
   * @deprecated use the safer methods {@link #ovrHmd_GetMeasuredLatencyTest2(com.oculusvr.capi.OvrLibrary.ovrHmd)} and
   *             {@link #ovrHmd_GetMeasuredLatencyTest2(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  double ovrHmd_GetMeasuredLatencyTest2(Pointer hmd);

  /**
   * pixel-read back method (-1 for invalid or N/A)<br>
   * Original signature : <code>double ovrHmd_GetMeasuredLatencyTest2(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:1009</i>
   */
  double ovrHmd_GetMeasuredLatencyTest2(OvrLibrary.ovrHmd hmd);

  /**
   * Returns defaultValue if property doesn't exist.<br>
   * Original signature : <code>float ovrHmd_GetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:1045</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetFloat(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String, float)} and
   *             {@link #ovrHmd_GetFloat(com.sun.jna.Pointer, com.sun.jna.Pointer, float)} instead
   */
  @Deprecated
  float ovrHmd_GetFloat(Pointer hmd, Pointer propertyName, float defaultVal);

  /**
   * Returns defaultValue if property doesn't exist.<br>
   * Original signature : <code>float ovrHmd_GetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:1045</i>
   */
  float ovrHmd_GetFloat(OvrLibrary.ovrHmd hmd, String propertyName, float defaultVal);

  /**
   * Modify float property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:1048</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_SetFloat(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String, float)} and
   *             {@link #ovrHmd_SetFloat(com.sun.jna.Pointer, com.sun.jna.Pointer, float)} instead
   */
  @Deprecated
  byte ovrHmd_SetFloat(Pointer hmd, Pointer propertyName, float value);

  /**
   * Modify float property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:1048</i>
   */
  byte ovrHmd_SetFloat(OvrLibrary.ovrHmd hmd, String propertyName, float value);

  /**
   * Maximum of arraySize elements will be written.<br>
   * Original signature : <code>int ovrHmd_GetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:1053</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetFloatArray(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String, java.nio.FloatBuffer, int)}
   *             and
   *             {@link #ovrHmd_GetFloatArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.FloatByReference, int)}
   *             instead
   */
  @Deprecated
  int ovrHmd_GetFloatArray(Pointer hmd, Pointer propertyName, FloatByReference values, int arraySize);

  /**
   * Maximum of arraySize elements will be written.<br>
   * Original signature : <code>int ovrHmd_GetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:1053</i>
   */
  int ovrHmd_GetFloatArray(OvrLibrary.ovrHmd hmd, String propertyName, FloatBuffer values, int arraySize);

  /**
   * Modify float[] property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:1057</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_SetFloatArray(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String, java.nio.FloatBuffer, int)}
   *             and
   *             {@link #ovrHmd_SetFloatArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.FloatByReference, int)}
   *             instead
   */
  @Deprecated
  byte ovrHmd_SetFloatArray(Pointer hmd, Pointer propertyName, FloatByReference values, int arraySize);

  /**
   * Modify float[] property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:1057</i>
   */
  byte ovrHmd_SetFloatArray(OvrLibrary.ovrHmd hmd, String propertyName, FloatBuffer values, int arraySize);

  /**
   * String memory is guaranteed to exist until next call to GetString or GetStringArray, or HMD is destroyed.<br>
   * Original signature : <code>char* ovrHmd_GetString(ovrHmd, const char*, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:1063</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetString(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String, java.lang.String)} and
   *             {@link #ovrHmd_GetString(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer ovrHmd_GetString(Pointer hmd, Pointer propertyName, Pointer defaultVal);

  /**
   * String memory is guaranteed to exist until next call to GetString or GetStringArray, or HMD is destroyed.<br>
   * Original signature : <code>char* ovrHmd_GetString(ovrHmd, const char*, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:1063</i>
   */
  Pointer ovrHmd_GetString(OvrLibrary.ovrHmd hmd, String propertyName, String defaultVal);

  /**
   * Can be used to check existence of a property.<br>
   * Original signature : <code>int ovrHmd_GetArraySize(ovrHmd, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:1068</i><br>
   * 
   * @deprecated use the safer methods
   *             {@link #ovrHmd_GetArraySize(com.oculusvr.capi.OvrLibrary.ovrHmd, java.lang.String)} and
   *             {@link #ovrHmd_GetArraySize(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int ovrHmd_GetArraySize(Pointer hmd, Pointer propertyName);

  /**
   * Can be used to check existence of a property.<br>
   * Original signature : <code>int ovrHmd_GetArraySize(ovrHmd, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:1068</i>
   */
  int ovrHmd_GetArraySize(OvrLibrary.ovrHmd hmd, String propertyName);

  public static class ovrHmd extends PointerType {
    public ovrHmd(Pointer address) {
      super(address);
    }

    public ovrHmd() {
      super();
    }
  };
}
